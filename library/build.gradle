apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: "com.jfrog.bintray"
apply plugin: "maven"
apply plugin: "maven-publish"
apply plugin: "signing"

android {
  compileSdkVersion rootProject.compileSdkVersion

  defaultConfig {
    minSdkVersion rootProject.minSdkVersion
    targetSdkVersion rootProject.compileSdkVersion
    versionCode rootProject.versionCode
    versionName rootProject.versionName
    resourcePrefix rootProject.artifactId + "_"
    consumerProguardFiles 'proguard-rules.pro'
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

}

dependencies {
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version")
  implementation("androidx.appcompat:appcompat:${appcompat_version}")
  implementation("androidx.constraintlayout:constraintlayout:${constraintlayout_version}")
  implementation("com.google.firebase:firebase-config:${firebase_config_version}")
}

task sourcesJar(type: Jar) {
  classifier = "sources"
  from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
  // For now, we'll disable Javadoc because of Kotlin files not being supported
  enabled = false

  title = project.libraryName + " API"
  description "Javadoc for the " + project.libraryName
  source = android.sourceSets.main.java.srcDirs

  options.charSet = "UTF-8"
  options.overview = "src/main/javadoc/overview.html"
  options.links = [
  "http://docs.oracle.com/javase/7/docs/api/",
  "http://d.android.com/reference/",
  "https://firebase.google.com/docs/reference/android/com/google/firebase/remoteconfig/package-summary"
  ]

  classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
  failOnError = false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = "javadoc"
  from javadoc.destinationDir
  // options.encoding = 'UTF-8'
}

artifacts
{
  archives javadocJar
  archives sourcesJar
}

def pomConfig = {
  licenses
  {
    license
    {
      name "MIT License (MIT)"
      url "https://opensource.org/licenses/MIT"
      distribution "repo"
    }
  }
}

publishing
{
  publications
  {
    ReleasePublication(MavenPublication)
    {
      artifact sourcesJar
      artifact javadocJar
      groupId project.groupId
      artifactId project.artifactId
      version android.defaultConfig.versionName

      pom.withXml
      {
        def root = asNode()
        root.appendNode("description", "A component which allows to advice or force an update of the app")
        root.appendNode("name", project.libraryName)
        root.appendNode("url", "https://github.com/smartnsoft/SmartAppUpdate-android")
        root.children().last() + pomConfig
      }
    }
  }
}

//https://gist.github.com/bugs84/b7887fb5d7f9f2d484b8
publishing.publications.all
{
  pom.withXml
  {
    asNode().dependencies."*".findAll()
    {
      it.scope.text() == "runtime" && project.configurations.compile.allDependencies.find { dep ->
        dep.name == it.artifactId.text()
      }
    }.each
    {
      it.scope*.value = "compile"
    }
  }
}

bintray
{
  publications = ["ReleasePublication"]

  pkg
  {
    repo = "maven"
    name = project.libraryName
    userOrg = "smartnsoft"
    licenses = ["MIT"]
    vcsUrl = "https://github.com/smartnsoft/SmartAppUpdate-android.git"
    publish = true

    version
    {
      name = android.defaultConfig.versionName
      desc = "A component which allows to advice or force an update of the app"
      vcsTag = "v" + android.defaultConfig.versionName
    }
  }
}

uploadArchives
{
  repositories
  {
    mavenDeployer
    {
      repository(url: "https://api.bintray.com/maven/smartnsoft/maven/" + rootProject.libraryName + "/;publish=1")
      {
        authentication(userName: findProperty("bintrayUsername") ?: "", password: findProperty("bintrayKey") ?: "")
      }

      snapshotRepository(url: nexusSnapshotUrl)
      {
        authentication(userName: nexusUsername, password: nexusPassword)
      }

      pom.project
      {
        name project.libraryName
        groupId project.groupId
        artifactId project.artifactId
        version android.defaultConfig.versionName
        packaging "aar"
      }
    }
  }
}
