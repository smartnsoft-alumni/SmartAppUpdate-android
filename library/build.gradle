apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: "maven"
apply plugin: "signing"

android {
  compileSdkVersion rootProject.compileSdkVersion

  defaultConfig {
    minSdkVersion rootProject.minSdkVersion
    targetSdkVersion rootProject.compileSdkVersion
    versionCode rootProject.versionCode
    versionName rootProject.versionName
    resourcePrefix rootProject.artifactId + "_"
    consumerProguardFiles 'proguard-rules.pro'
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

}

dependencies {
  implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version")
  implementation("androidx.appcompat:appcompat:${appcompat_version}")
  implementation("androidx.constraintlayout:constraintlayout:${constraintlayout_version}")
  implementation("com.google.firebase:firebase-config:${firebase_config_version}")
}

uploadArchives
{
  repositories
  {
    mavenDeployer
    {
      repository(url: findProperty("nexusReleaseUrl") ?: "")
      {
        authentication(userName: findProperty("nexusUsername") ?: "", password: findProperty("nexusPassword") ?: "")
      }
      snapshotRepository(url: findProperty("nexusReleaseUrl") ?: "")
      {
        authentication(userName: findProperty("nexusUsername") ?: "", password: findProperty("nexusPassword") ?: "")
      }
      pom.project
      {
        name rootProject.libraryName
        groupId rootProject.groupId
        artifactId rootProject.artifactId
        version android.defaultConfig.versionName
        packaging "aar"
      }
    }
  }
}

// build a jar with source files
task generateSourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  failOnError false
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  classpath += configurations.compile
}

// We need this code to avoid the warning due to support annotations usage
afterEvaluate {
  javadoc.classpath += files(android.libraryVariants.collect { variant ->
    variant.javaCompiler.classpath.files
  })
}

// build a jar with javadoc
task generateJavadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  classifier = 'javadoc'
}

artifacts {
  archives generateSourcesJar
  archives generateJavadocJar
}
repositories {
  mavenCentral()
}
